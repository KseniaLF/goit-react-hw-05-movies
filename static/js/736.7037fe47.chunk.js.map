{"version":3,"file":"static/js/736.7037fe47.chunk.js","mappings":"mTAGMA,EAAM,mCAECC,EAAW,mCAAG,8FAASC,EAAT,EAASA,OAAT,SACFC,EAAAA,EAAAA,IAAA,kEACsCH,GAC3D,CACEE,OAAAA,IAJqB,cACnBE,EADmB,yBAQlBA,EAASC,KAAKC,SARI,2CAAH,sDAaXC,EAAe,mCAAG,WAAOC,EAAP,mFAAgBN,EAAhB,EAAgBA,OAAhB,SACNC,EAAAA,EAAAA,IAAA,4DACgCH,EADhC,kBAC6CQ,EAD7C,8CAErB,CACEN,OAAAA,IAJyB,cACvBE,EADuB,yBAQtBA,EAASC,MARa,2CAAH,wDAWfI,EAAe,mCAAG,WAAOC,EAAP,mFAAkBR,EAAlB,EAAkBA,OAAlB,SACNC,EAAAA,EAAAA,IAAA,6CACiBO,EADjB,oBACoCV,EADpC,mBAErB,CAAEE,OAAAA,IAHyB,cACvBE,EADuB,yBAMtBA,EAASC,MANa,2CAAH,wDASfM,EAAe,mCAAG,WAAOD,EAAP,mFAAkBR,EAAlB,EAAkBA,OAAlB,SACNC,EAAAA,EAAAA,IAAA,6CACiBO,EADjB,4BAC4CV,EAD5C,mBAErB,CAAEE,OAAAA,IAHyB,cACvBE,EADuB,yBAMtBA,EAASC,KAAKO,MANQ,2CAAH,wDASfC,EAAe,mCAAG,WAAOH,EAAP,mFAAkBR,EAAlB,EAAkBA,OAAlB,SACNC,EAAAA,EAAAA,IAAA,6CACiBO,EADjB,4BAC4CV,EAD5C,0BAErB,CAAEE,OAAAA,IAHyB,cACvBE,EADuB,yBAMtBA,EAASC,KAAKC,SANQ,2CAAH,uD,4LC7CfQ,E,QAAWC,GAAAA,GAAH,yV,SCIRC,EAAO,WAClB,IAAQN,GAAYO,EAAAA,EAAAA,MAAZP,QAER,GAAkCQ,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAwBA,OAtBAC,EAAAA,EAAAA,YAAU,WACRD,GAAa,GACb,IAAME,EAAkB,IAAIC,gBAEtBC,EAAS,mCAAG,8GAEKf,EAAAA,EAAAA,IAAgBD,EAASc,GAF9B,OAERnB,EAFQ,OAIde,EAAaf,GACbiB,GAAa,GALC,gDAOdK,QAAQC,IAAR,MAPc,yDAAH,qDAaf,OAFAF,IAEO,WACLF,EAAgBK,OACjB,CACF,GAAE,CAACnB,IAEAW,GACK,SAACS,EAAA,EAAD,IAEJT,GAAkC,IAArBF,EAAUY,OAsBvBV,OAAL,GACS,yCArBL,SAACP,EAAD,UACGK,EAAUa,KAAI,SAAAC,GACb,IAAMC,EAAcD,EAAME,aAAN,0CACmBF,EAAME,cACzCC,EAAQ,GAEZ,OACE,2BACE,gBAAKC,IAAKH,EAAaI,MAAO,IAAKC,IAAI,MACvC,4BACE,uBAAIN,EAAMO,QACV,wCAAgBP,EAAMQ,kBAJjBR,EAAMS,QAQlB,KAQR,EACD,G","sources":["api.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\n// axios.defaults.baseURL = 'https://pixabay.com/api';\nconst KEY = '02bcb177375afb51516704bac2617151';\n\nexport const getTrending = async ({ signal }) => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${KEY}`,\n    {\n      signal,\n    }\n  );\n  // console.log(abortController);\n  return response.data.results;\n};\n\n// https: //api.themoviedb.org/3/search/movie?api_key=<<api_key>>&language=en-US&page=1&include_adult=false\n\nexport const getSearchMovies = async (query, { signal }) => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=${KEY}&query=${query}&language=en-US&page=1&include_adult=false`,\n    {\n      signal,\n    }\n  );\n  //   return console.log(response.data.results);\n  return response.data;\n};\n\nexport const getMovieDetails = async (movieId, { signal }) => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=${KEY}&language=en-US`,\n    { signal }\n  );\n  // return console.log(response);\n  return response.data;\n};\n\nexport const getMovieCredits = async (movieId, { signal }) => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${KEY}&language=en-US`,\n    { signal }\n  );\n  // return console.log(response);\n  return response.data.cast;\n};\n\nexport const getMovieReviews = async (movieId, { signal }) => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`,\n    { signal }\n  );\n  // return console.log(response.data);\n  return response.data.results;\n};\n","import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(150px, auto));\n  gap: 20px;\n\n  li {\n    border-radius: 5px;\n    background-color: orange;\n\n    img {\n      width: 100%;\n      border-radius: 5px 5px 0 0;\n    }\n\n    div {\n      padding: 10px 10px 3px 10px;\n    }\n  }\n`;\n","import { getMovieCredits } from 'api';\nimport { Loader } from 'components/Loader';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { CastList } from './Cast.styled';\n\nexport const Cast = () => {\n  const { movieId } = useParams();\n\n  const [movieCast, setMovieCast] = useState([]);\n  const [isLoading, setiILoading] = useState(false);\n\n  useEffect(() => {\n    setiILoading(true);\n    const abortController = new AbortController();\n\n    const fetchData = async () => {\n      try {\n        const data = await getMovieCredits(movieId, abortController);\n        // console.log(data);\n        setMovieCast(data);\n        setiILoading(false);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      abortController.abort();\n    };\n  }, [movieId]);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n  if (!isLoading && movieCast.length !== 0) {\n    return (\n      <CastList>\n        {movieCast.map(actor => {\n          const actorUrlImg = actor.profile_path\n            ? `https://image.tmdb.org/t/p/w500/${actor.profile_path}`\n            : require('image/noImage.jpg');\n\n          return (\n            <li key={actor.cast_id}>\n              <img src={actorUrlImg} width={150} alt=\"\" />\n              <div>\n                <b>{actor.name}</b>\n                <p> Character: {actor.character}</p>\n              </div>\n            </li>\n          );\n        })}\n      </CastList>\n    );\n  }\n\n  if (!isLoading) {\n    return <div>No results</div>;\n  }\n};\nexport default Cast;\n"],"names":["KEY","getTrending","signal","axios","response","data","results","getSearchMovies","query","getMovieDetails","movieId","getMovieCredits","cast","getMovieReviews","CastList","styled","Cast","useParams","useState","movieCast","setMovieCast","isLoading","setiILoading","useEffect","abortController","AbortController","fetchData","console","log","abort","Loader","length","map","actor","actorUrlImg","profile_path","require","src","width","alt","name","character","cast_id"],"sourceRoot":""}